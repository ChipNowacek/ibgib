defmodule IbGib.Auth.Identity do
  @moduledoc """
  This module relates to handling identity with respect to ib_gib.

  I am starting out with the following fundamental thing: identity^gib

  Each of these will be instanced, mut8d and rel8d.

  ## Overall Workflow

  So a user will come to the page. This creates a new session, which provides
  the first "layer" of identity, basically an anonymous identity. There is a
  call made to `get_identity/2` like the following:
    `get_identity(%{session_id: session123}, %{ip: 1.2.3.4})`
  _(I don't know if I'm actually going to log IPs, but probably.)_

  If the session is new, then the queries shown will be for anonymous users:
  ib_gib primitives, popular, category_x, etc.

  At any point the user will be able to add an identity layer. This is like
  logging in. (Probably will be a login screen). This will send a `POST` with
  either username/password (which of course is weak) and/or a sign-in "magic
  link" sent to a user's email. Here will be the associated identity call:

    `get_identity(%{username: "bob", password: "password"}, %{ip: 1.2.3.4})`.
    or
    `get_identity(%{token: abcde12345}, %{email: "example@email.addr", ip: 1.2.3.4})`

  Once the new identity has been created, it will be seen that there are
  multiple identities that are active. Each of these identities will be
  "attached" to new ib, and these identities drive which queries are presented
  to the user, or more generally speaking, which UX is presented to the user.
  """

  use IbGib.Constants, :ib_gib
  use IbGib.Constants, :error_msgs
  import IbGib.{Expression, QueryOptionsFactory, Macros, Helper}

  require Logger

  @doc """
  Checks for an existing identity ib_gib. If does not exist, creates one.

  Returns {:ok, identity_ib_gib} or {:error, reason}

  ## Parameters

  `priv_data` will not be directly stored but will be hashed and converted into
  the identity "ib", which makes the provided identity details content
  addressable. This also means that any changes would create an entirely new
  ib_gib.

  `pub_data` includes what will be the publicly visible associated with the
  identity. If the existing identity has different details, then the identity
  will be mut8d to incorporate this data.


  ## Implementation

  For an identity's ib, I am using the ib as the hash of the given identity
  details.
  E.g. "%{username => cool user, password => badPASSWORD}" hashes to
       "ABCDE12345ABCDE12345ABCDE12345ABCDE12345ABCDE12345"
       "%{identityTokenId => aiSDFJEisjFJSEkwi1923487}" hashes to
       "12345ABCDE12345ABCDE12345ABCDE12345ABCDE12345ABCDE"
       "%{email => "example@email.address", identityId => aiSDFJEisjFJSEkwi1923487}" hashes to
       "YOyoYOyooo1234567890YOyoYOyooo1234567890YOyoYOyooo12345678901234"
       etc.

  Nothing in the `priv_data` is directly persisted. It is only used to
  generate the corresponding `ib`. Since this is "publicly visible", it is
  inevitable that it will be broken via rainbow tables, etc. But since we have
  a "full"ish history of all ib_gib, we can go back to any point in time and
  continue from any point going forward.

  Anything that will be "immediately" publicly visible will be passed in as
  `pub_data`. This includes emails (which are all publicly visible),
  usernames, etc.

  ## Security

  #### What if someone simply forks a new "identity"? If we only look for the
    most recent `ib` with the given hashed `ib`, then this could return the
    forged identity.

    Yes, the `ib` is entirely in control of the user. But the `gib` is only
    generated by the `ib_gib` engine. This is how we can "sign" our primitives
    with a `gib` of only "gib". No one, without direct access to a persistence
    substrate (i.e. db), can manipulate this. In the case of identity, we need
    to keep up not only with the initial identity, but subsequent mut8ns. So we
    cannot simply give the `gib` a value of "gib". So our signature will be
    overwriting the first three and last three characters of the commit hash
    with "gib". E.g. "ABCDEFsomehash12345" => "gibDEFsomehash12gib". Now we can
    add a query constraint of `WHERE gib LIKE 'gib%gib'` (or whatever the
    implementation is).

  ## Additional

  See `IbGib.Auth.Identity` for more information.
  """
  @spec get_identity(map, map) :: {:ok, String.t} | {:error, any}
  def get_identity(priv_data, pub_data)
    when is_map(priv_data) and is_map(pub_data) do
      _ = Logger.debug "get_identity yooooooooooooooooooooo"
    with {:ok, root_identity} <- IbGib.Expression.Supervisor.start_expression({"identity", "gib"}),
      {:ok, identity_ib} <- generate_identity_ib(priv_data, pub_data),
      {:ok, latest} <- get_latest_identity_ib_gib(identity_ib, root_identity),
      {:ok, {identity_ib_gib, identity_info, identity}} <-
        create_identity_if_needed(latest, root_identity, identity_ib),
      {:ok, identity_ib_gib} <-
        update_data(identity_info, pub_data, identity, identity_ib_gib) do
      {:ok, identity_ib_gib}
    else
      {:error, reason} -> {:error, reason}
    end
  end
  def get_identity(unknown_arg) do
    {:error, emsg_invalid_args(unknown_arg)}
  end

  @doc """
  Gets the identity ib based on the given `identity_id`.

  ## Examples
      iex> priv_data = %{"session_id" => "some-id_here234987SD(^&@{%})"}
      ...> pub_data = %{"type" => "session"}
      ...> IbGib.Auth.Identity.generate_identity_ib(priv_data, pub_data)
      {:ok, "session_B5A62720F3D23B9140BC53581115215A6B647B30D0644A4D975DC5D66DE75696"}

      iex> priv_data = %{"email_addr" => "ib@gib.yo"}
      ...> pub_data = %{"type" => "email", "email_addr" => "ib@gib.yo"}
      ...> IbGib.Auth.Identity.generate_identity_ib(priv_data, pub_data)
      {:ok, "email_DA740C768F924F0C7F7695CFEF89A73A0936420FF7C9D16E2F3CDC7E6A3A0060"}

  Returns {:ok, identity_ib} if ok, else {:error, reason}
  """
  @spec generate_identity_ib(map, map) :: {:ok, String.t} | {:error, String.t}
  def generate_identity_ib(priv_data, pub_data)
    when is_map(priv_data) and is_map(pub_data) do
    with(
      # Get the identity type, e.g. "session", "email"
      {:ok, identity_type} <- get_identity_type(pub_data),

      # Get the identity hash from `priv_data`
      priv_data_hash when priv_data_hash != :error <- hash(priv_data),

      # Squash together to form the `ib`, e.g. "email_ABC123", "session_DEF456"
      identity_ib <- identity_type <> @identity_type_delim <> priv_data_hash
    ) do
      {:ok, identity_ib}
    else
      error -> default_handle_error(error)
    end
  end
  def generate_identity_ib(priv_data, pub_data) do
    {:error, emsg_invalid_args([priv_data, pub_data])}
  end

  defp get_identity_type(pub_data) do
    type = Map.get(pub_data, "type")
    if is_bitstring(type) and String.length(type) > 0 do
      {:ok, type}
    else
      {:error, "No type specified"}
    end
  end

  @doc """
  Creates a query that checks for the most recent ib_gib corresponding to the
  given `identity_ib`.

  The `query_off_of` is required because we need an ib_gib instance off of
  which to call `query_off_of |> query(query_options)`.

  Returns the latest identity ib^gib in {:ok, latest} if found. If not found
  returns {:ok, nil}. And if an error, {:error, reason}.
  """
  @spec get_latest_identity_ib_gib(String.t, pid) :: {:ok, String.t} | {:ok, nil} | {:error, String.t}
  def get_latest_identity_ib_gib(identity_ib, query_off_of)
    when is_bitstring(identity_ib) and is_pid(query_off_of) do

    query_options =
      do_query
      |> where_ib("is", identity_ib)
      |> where_gib("like", "#{@gib_stamp}%")
      |> most_recent_only

    with \
      {:ok, query_result} <-
        query_off_of |> query([@bootstrap_identity_ib_gib], query_options),

      {:ok, query_result_info} <-
        query_result |> get_info do

          result_list = query_result_info[:rel8ns]["result"]

          result_count = Enum.count(result_list)
          case result_count do
            1 ->
              # All queries return ib^gib itself as the first result.
              # So if there is one result, then that is like an "empty" result.
              {:ok, nil}

            2 ->
              {:ok, Enum.at(result_list, 1)}
              # All queries return ib^gib itself as the first result.
              # So if two results, then the second will be our identity ib^gib

            count ->
              {:error, emsg_query_result_count(count)}
          end
    else
      {:error, reason} ->
        {:error, reason}
      error ->
        {:error, "#{inspect error}"}
    end
  end
  def get_latest_identity_ib_gib(identity_ib, query_off_of) do
    {:error, emsg_invalid_args([identity_ib, query_off_of])}
  end

  # no `existing_ib_gib` means that we do not already have an identity
  # associated with the current user. This means that the user is not
  # authenticated, and we will need to bootstrap an identity for them.
  defp create_identity_if_needed(existing_ib_gib, root_identity, identity_ib)
    when is_nil(existing_ib_gib) do
    with(
      {:ok, identity} <-
        root_identity
        |> instance([@bootstrap_identity_ib_gib], identity_ib, %{"gib_stamp" => "true"}),
      {:ok, identity_info} <- identity |> get_info,
      {:ok, identity_ib_gib} <- get_ib_gib(identity_info)
    ) do
      {:ok, {identity_ib_gib, identity_info, identity}}
    else
      {:error, reason} -> {:error, reason}
    end
  end
  defp create_identity_if_needed(existing_ib_gib, _, _) do
    with(
     {:ok, identity} <-
        IbGib.Expression.Supervisor.start_expression(existing_ib_gib),
      {:ok, identity_info} <- identity |> get_info
      # {:ok, identity_ib_gib} <- get_ib_gib(identity_info)
    ) do
      {:ok, {existing_ib_gib, identity_info, identity}}
    else
      {:error, reason} -> {:error, reason}
    end
  end

  # @doc """
  # Looks at the existing `identity_info` and compares it to the given
  # `identity_data`. If it's the same, then it simply returns the identity
  # """
  defp update_data(identity_info, identity_data, identity, identity_ib_gib)
    when is_map(identity_info) and is_map(identity_data) and
         is_pid(identity) and is_bitstring(identity_ib_gib) do
           _ = Logger.debug("updating data...maybe. identity_info:\n#{inspect identity_info, pretty: true}\nidentity_ib_gib: #{identity_ib_gib}" |> ExChalk.bg_green |> ExChalk.black)
    if Map.equal?(identity_info[:data], identity_data) do
      _ = Logger.debug "identity_info up-to-date"
      {:ok, identity_ib_gib}
    else
      _ = Logger.debug "identity_info out-of-date. identity_info:\n#{inspect identity_info, pretty: true}\nidentity_data:\n#{inspect identity_data, pretty: true}"
      opts = %{"gib_stamp" => "true"}
      # Everyone is authorized with at least @bootstrap_identity_ib_gib, and
      # by providing the priv_data, the user has already been authorized with
      # current identity, identity_ib_gib. We are only looking to mut8 if we
      # should, so this should be correct authorization.
      authz = [@bootstrap_identity_ib_gib, identity_ib_gib]
      with(
        {:ok, new_identity} <- identity |> mut8(authz, identity_data, opts),
        {:ok, new_identity_info} <- new_identity |> get_info,
        {:ok, new_identity_ib_gib} <- new_identity_info |> get_ib_gib
      ) do
        {:ok, new_identity_ib_gib}
      else
        {:error, reason} -> {:error, reason}
        error -> {:error, error}
      end
    end
  end

end
